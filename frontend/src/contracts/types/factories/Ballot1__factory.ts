/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ballot1, Ballot1Interface } from "../Ballot1";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "chairperson",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numProposals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposalNames",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "bool",
        name: "voted",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "vote",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnigProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "winningProposal_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260405180606001604052806040518060400160405280600781526020017f5761726f646f6d0000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f54616e616b6f726e00000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f4e617261746f726e0000000000000000000000000000000000000000000000008152508152506003906003620000d092919062000276565b50348015620000de57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038054905060048190555060005b6003805490508110156200026f57600260405180604001604052806003848154811062000160576200015f620004e7565b5b906000526020600020018054620001779062000405565b80601f0160208091040260200160405190810160405280929190818152602001828054620001a59062000405565b8015620001f65780601f10620001ca57610100808354040283529160200191620001f6565b820191906000526020600020905b815481529060010190602001808311620001d857829003601f168201915b505050505081526020016000815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906200024c929190620002dd565b50602082015181600101555050808062000266906200043b565b9150506200012e565b5062000516565b828054828255906000526020600020908101928215620002ca579160200282015b82811115620002c9578251829080519060200190620002b8929190620002dd565b509160200191906001019062000297565b5b509050620002d991906200036e565b5090565b828054620002eb9062000405565b90600052602060002090601f0160209004810192826200030f57600085556200035b565b82601f106200032a57805160ff19168380011785556200035b565b828001600101855582156200035b579182015b828111156200035a5782518255916020019190600101906200033d565b5b5090506200036a919062000396565b5090565b5b80821115620003925760008181620003889190620003b5565b506001016200036f565b5090565b5b80821115620003b157600081600090555060010162000397565b5090565b508054620003c39062000405565b6000825580601f10620003d75750620003f8565b601f016020900490600052602060002090810190620003f7919062000396565b5b50565b6000819050919050565b600060028204905060018216806200041e57607f821691505b60208210811415620004355762000434620004b8565b5b50919050565b60006200044882620003fb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200047e576200047d62000489565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6109d480620005266000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063400e39491161005b578063400e394914610116578063a3ec138d14610134578063e28a2afc14610165578063e2ba53f01461019557610088565b80630121b93f1461008d578063013cf08b146100a95780632e4176cf146100da578063385b44bd146100f8575b600080fd5b6100a760048036038101906100a2919061060b565b6101b3565b005b6100c360048036038101906100be919061060b565b6102ad565b6040516100d1929190610727565b60405180910390f35b6100e2610369565b6040516100ef91906106c1565b60405180910390f35b61010061038d565b60405161010d9190610777565b60405180910390f35b61011e610415565b60405161012b9190610777565b60405180910390f35b61014e600480360381019061014991906105de565b61041b565b60405161015c9291906106dc565b60405180910390f35b61017f600480360381019061017a919061060b565b61044c565b60405161018c9190610705565b60405180910390f35b61019d6104f8565b6040516101aa9190610705565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff1615610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f90610757565b60405180910390fd5b60018160000160006101000a81548160ff0219169083151502179055508181600101819055506002828154811061028257610281610902565b5b906000526020600020906002020160010160008154809291906102a49061085b565b91905055505050565b600281815481106102bd57600080fd5b90600052602060002090600202016000915090508060000180546102e090610829565b80601f016020809104026020016040519081016040528092919081815260200182805461030c90610829565b80156103595780601f1061032e57610100808354040283529160200191610359565b820191906000526020600020905b81548152906001019060200180831161033c57829003601f168201915b5050505050908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000905060005b6002805490508110156104105781600282815481106103b9576103b8610902565b5b90600052602060002090600202016001015411156103fd57600281815481106103e5576103e4610902565b5b90600052602060002090600202016001015491508092505b80806104089061085b565b915050610397565b505090565b60045481565b60016020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b6003818154811061045c57600080fd5b90600052602060002001600091509050805461047790610829565b80601f01602080910402602001604051908101604052809291908181526020018280546104a390610829565b80156104f05780601f106104c5576101008083540402835291602001916104f0565b820191906000526020600020905b8154815290600101906020018083116104d357829003601f168201915b505050505081565b6060600261050461038d565b8154811061051557610514610902565b5b9060005260206000209060020201600001805461053190610829565b80601f016020809104026020016040519081016040528092919081815260200182805461055d90610829565b80156105aa5780601f1061057f576101008083540402835291602001916105aa565b820191906000526020600020905b81548152906001019060200180831161058d57829003601f168201915b5050505050905090565b6000813590506105c381610970565b92915050565b6000813590506105d881610987565b92915050565b6000602082840312156105f4576105f3610931565b5b6000610602848285016105b4565b91505092915050565b60006020828403121561062157610620610931565b5b600061062f848285016105c9565b91505092915050565b610641816107ae565b82525050565b610650816107c0565b82525050565b600061066182610792565b61066b818561079d565b935061067b8185602086016107f6565b61068481610936565b840191505092915050565b600061069c600d8361079d565b91506106a782610947565b602082019050919050565b6106bb816107ec565b82525050565b60006020820190506106d66000830184610638565b92915050565b60006040820190506106f16000830185610647565b6106fe60208301846106b2565b9392505050565b6000602082019050818103600083015261071f8184610656565b905092915050565b600060408201905081810360008301526107418185610656565b905061075060208301846106b2565b9392505050565b600060208201905081810360008301526107708161068f565b9050919050565b600060208201905061078c60008301846106b2565b92915050565b600081519050919050565b600082825260208201905092915050565b60006107b9826107cc565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156108145780820151818401526020810190506107f9565b83811115610823576000848401525b50505050565b6000600282049050600182168061084157607f821691505b60208210811415610855576108546108d3565b5b50919050565b6000610866826107ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610899576108986108a4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f416c726561647920766f74656400000000000000000000000000000000000000600082015250565b610979816107ae565b811461098457600080fd5b50565b610990816107ec565b811461099b57600080fd5b5056fea26469706673582212202ebc40569db4fafd1917c187effe7dd856d5c2647d16b1ce8679a0379b150a5a64736f6c63430008070033";

export class Ballot1__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ballot1> {
    return super.deploy(overrides || {}) as Promise<Ballot1>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Ballot1 {
    return super.attach(address) as Ballot1;
  }
  connect(signer: Signer): Ballot1__factory {
    return super.connect(signer) as Ballot1__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Ballot1Interface {
    return new utils.Interface(_abi) as Ballot1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Ballot1 {
    return new Contract(address, _abi, signerOrProvider) as Ballot1;
  }
}
