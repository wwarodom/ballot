/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ballot3, Ballot3Interface } from "../Ballot3";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proposalNames",
        type: "bytes32[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "Delegate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "GiveRightToVote",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    name: "Voted",
    type: "event",
  },
  {
    inputs: [],
    name: "chairperson",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBytes32ArrayForInput",
    outputs: [
      {
        internalType: "bytes32[3]",
        name: "b32Arr",
        type: "bytes32[3]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "giveRightToVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "voted",
        type: "bool",
      },
      {
        internalType: "address",
        name: "delegate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "vote",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerName",
    outputs: [
      {
        internalType: "bytes32",
        name: "winnerName_",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "winningProposal_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017d1380380620017d1833981810160405281019062000037919062000243565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200017657600260405180604001604052808484815181106200010f576200010e620003b3565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806200016d9062000336565b915050620000e2565b505062000450565b6000620001956200018f84620002bd565b62000294565b90508083825260208201905082856020860282011115620001bb57620001ba62000416565b5b60005b85811015620001ef5781620001d488826200022c565b845260208401935060208301925050600181019050620001be565b5050509392505050565b600082601f83011262000211576200021062000411565b5b8151620002238482602086016200017e565b91505092915050565b6000815190506200023d8162000436565b92915050565b6000602082840312156200025c576200025b62000420565b5b600082015167ffffffffffffffff8111156200027d576200027c6200041b565b5b6200028b84828501620001f9565b91505092915050565b6000620002a0620002b3565b9050620002ae828262000300565b919050565b6000604051905090565b600067ffffffffffffffff821115620002db57620002da620003e2565b5b602082029050602081019050919050565b6000819050919050565b6000819050919050565b6200030b8262000425565b810181811067ffffffffffffffff821117156200032d576200032c620003e2565b5b80604052505050565b60006200034382620002f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000379576200037862000384565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200044181620002ec565b81146200044d57600080fd5b50565b61137180620004606000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c80635c19a95c116100665780635c19a95c14610120578063609ff1bd1461013c5780639e7b8d611461015a578063a3ec138d14610176578063e2ba53f0146101a957610092565b806265f9b5146100975780630121b93f146100b5578063013cf08b146100d15780632e4176cf14610102575b600080fd5b61009f6101c7565b6040516100ac9190610e28565b60405180910390f35b6100cf60048036038101906100ca9190610bd7565b61024f565b005b6100eb60048036038101906100e69190610bd7565b6103f6565b6040516100f9929190610e5e565b60405180910390f35b61010a61042a565b6040516101179190610dd6565b60405180910390f35b61013a60048036038101906101359190610baa565b61044e565b005b610144610821565b6040516101519190610f87565b60405180910390f35b610174600480360381019061016f9190610baa565b6108a9565b005b610190600480360381019061018b9190610baa565b610acd565b6040516101a09493929190610fa2565b60405180910390f35b6101b1610b2a565b6040516101be9190610e43565b60405180910390f35b6101cf610b5e565b60405180606001604052807f5761726f646f6d0000000000000000000000000000000000000000000000000081526020017f5461616b6f726e0000000000000000000000000000000000000000000000000081526020017f4e617261746f726e000000000000000000000000000000000000000000000000815250905090565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156102da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d190610e87565b60405180910390fd5b8060010160009054906101000a900460ff161561032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390610ec7565b60405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546002838154811061036b5761036a611145565b5b9060005260206000209060020201600101600082825461038b9190611025565b925050819055507fea66f58e474bc09f580000e81f31b334d171db387d0c6098ba47bd897741679b3383600285815481106103c9576103c8611145565b5b9060005260206000209060020201600101546040516103ea93929190610df1565b60405180910390a15050565b6002818154811061040657600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da90610ee7565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054990610f67565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106c257600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490610f27565b60405180910390fd5b610553565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156107c5578160000154600282600201548154811061079957610798611145565b5b906000526020600020906002020160010160008282546107b99190611025565b925050819055506107e5565b81600001548160000160008282546107dd9190611025565b925050819055505b7f49339f0f595f326ceb5a2507406676ce27cf0ad56a280e47bbda53d4d90031aa836040516108149190610dd6565b60405180910390a1505050565b6000806000905060005b6002805490508110156108a457816002828154811061084d5761084c611145565b5b9060005260206000209060020201600101541115610891576002818154811061087957610878611145565b5b90600052602060002090600202016001015491508092505b808061089c906110cd565b91505061082b565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e90610f07565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156109c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109be90610f47565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4390610ea7565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507faf41c3ab39410a9699b71c53288271a2b4ed3193b20bd51ed9049742230117a081604051610ac29190610dd6565b60405180910390a150565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b60006002610b36610821565b81548110610b4757610b46611145565b5b906000526020600020906002020160000154905090565b6040518060600160405280600390602082028036833780820191505090505090565b600081359050610b8f8161130d565b92915050565b600081359050610ba481611324565b92915050565b600060208284031215610bc057610bbf611174565b5b6000610bce84828501610b80565b91505092915050565b600060208284031215610bed57610bec611174565b5b6000610bfb84828501610b95565b91505092915050565b6000610c108383610c91565b60208301905092915050565b610c258161107b565b82525050565b610c3481610ff1565b610c3e8184611009565b9250610c4982610fe7565b8060005b83811015610c7a578151610c618782610c04565b9650610c6c83610ffc565b925050600181019050610c4d565b505050505050565b610c8b8161108d565b82525050565b610c9a81611099565b82525050565b610ca981611099565b82525050565b6000610cbc601483611014565b9150610cc782611179565b602082019050919050565b6000610cdf602583611014565b9150610cea826111a2565b604082019050919050565b6000610d02600e83611014565b9150610d0d826111f1565b602082019050919050565b6000610d25601283611014565b9150610d308261121a565b602082019050919050565b6000610d48602883611014565b9150610d5382611243565b604082019050919050565b6000610d6b601983611014565b9150610d7682611292565b602082019050919050565b6000610d8e601883611014565b9150610d99826112bb565b602082019050919050565b6000610db1601e83611014565b9150610dbc826112e4565b602082019050919050565b610dd0816110c3565b82525050565b6000602082019050610deb6000830184610c1c565b92915050565b6000606082019050610e066000830186610c1c565b610e136020830185610dc7565b610e206040830184610dc7565b949350505050565b6000606082019050610e3d6000830184610c2b565b92915050565b6000602082019050610e586000830184610ca0565b92915050565b6000604082019050610e736000830185610ca0565b610e806020830184610dc7565b9392505050565b60006020820190508181036000830152610ea081610caf565b9050919050565b60006020820190508181036000830152610ec081610cd2565b9050919050565b60006020820190508181036000830152610ee081610cf5565b9050919050565b60006020820190508181036000830152610f0081610d18565b9050919050565b60006020820190508181036000830152610f2081610d3b565b9050919050565b60006020820190508181036000830152610f4081610d5e565b9050919050565b60006020820190508181036000830152610f6081610d81565b9050919050565b60006020820190508181036000830152610f8081610da4565b9050919050565b6000602082019050610f9c6000830184610dc7565b92915050565b6000608082019050610fb76000830187610dc7565b610fc46020830186610c82565b610fd16040830185610c1c565b610fde6060830184610dc7565b95945050505050565b6000819050919050565b600060039050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b6000611030826110c3565b915061103b836110c3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110705761106f611116565b5b828201905092915050565b6000611086826110a3565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006110d8826110c3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561110b5761110a611116565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b7f566f746572206e65766572206765747320726967687420746f20766f7465206260008201527f65666f7265000000000000000000000000000000000000000000000000000000602082015250565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b6113168161107b565b811461132157600080fd5b50565b61132d816110c3565b811461133857600080fd5b5056fea26469706673582212203dd7d2ff588c7caaf4e3e80b69be1e7aa048da15d95666e862b8fc3e0979cfa864736f6c63430008070033";

export class Ballot3__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    proposalNames: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ballot3> {
    return super.deploy(proposalNames, overrides || {}) as Promise<Ballot3>;
  }
  getDeployTransaction(
    proposalNames: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(proposalNames, overrides || {});
  }
  attach(address: string): Ballot3 {
    return super.attach(address) as Ballot3;
  }
  connect(signer: Signer): Ballot3__factory {
    return super.connect(signer) as Ballot3__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Ballot3Interface {
    return new utils.Interface(_abi) as Ballot3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Ballot3 {
    return new Contract(address, _abi, signerOrProvider) as Ballot3;
  }
}
